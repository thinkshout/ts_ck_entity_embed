<?php

/**
 * @file
 * Defines core TS CK Entity Embed functionality.
 */

/**
 * Implements hook_hook_info().
 */
function ts_ck_entity_embed_hook_info() {
  $hooks = array(
    'ts_ck_entity_embed_entity_info' => array(
      'group' => 'ts_ck_entity_embed',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_permission().
 */
function ts_ck_entity_embed_permission() {
  return array(
    'access ckeditor entity embed' => array(
      'title' => t('Access CKEditor Entity Embed plugin'),
    ),
  );
}

/**
 * Implements hook_ckeditor_plugin().
 */
function ts_ck_entity_embed_ckeditor_plugin() {
  $plugins = array();

  $plugins['entity'] = array(
    'name' => 'entity',
    'desc' => t('Plugin for embedding entities.'),
    'path' => drupal_get_path('module', 'ts_ck_entity_embed') . '/plugins/entity/',
    'buttons' => array(
      'Entity' => array(
        'icon' => 'icons/entity.png',
        'label' => 'Entity',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_filter_info().
 */
function ts_ck_entity_embed_filter_info() {
  $filters['ckeditor_entity_embed'] = array(
    'title' => t('CKEditor Entity Embed'),
    'description' => t('Renders entities embedded into a text field.'),
    'process callback' => 'ts_ck_entity_embed_filter_process',
  );

  return $filters;
}

/**
 * Filter process callback for CKEditor Entity Embed plugin.
 */
function ts_ck_entity_embed_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {

}

/**
 * Gets embeddable entity information.
 *
 * @see hook_ts_ck_entity_embed_entity_info()
 */
function ts_ck_entity_embed_get_entity_info() {
  $entity_info = &drupal_static(__FUNCTION__);

  if (!isset($entity_info)) {
    $entity_info = array();

    foreach (module_implements('ts_ck_entity_embed_entity_info') as $module) {
      foreach (module_invoke($module, 'ts_ck_entity_embed_entity_info') as $entity_id => $info) {
        $entity_info[$entity_id] = $info;
      }
    }
  }

  return $entity_info;
}
