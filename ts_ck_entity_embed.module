<?php

/**
 * @file
 * Defines core TS CK Entity Embed functionality.
 */

include_once 'ts_ck_entity_embed.features.inc';

/**
 * Implements hook_menu()
 */
function ts_ck_entity_embed_menu() {
  $items = array();

  /**
   * Provides a JSON-encoded array of entity IDs and labels.
   *
   * Parameters:
   *   - Entity type
   *   - Search string
   */
  $items['admin/ts_ck_entity_embed/entities/%/%'] = array(
    'page callback' => 'ts_ck_entity_embed_entity_search',
    'page arguments' => array(3, 4),
    'access callback' => 'ts_ck_entity_embed_permission',
    'type' => MENU_CALLBACK,
  );

  /**
   * Provides the HTML of a rendered view.
   *
   * Parameters:
   *   - View ID
   */
  $items['admin/ts_ck_entity_embed/view/%'] = array(
    'page callback' => 'ts_ck_entity_embed_view_render',
    'page arguments' => array(3),
    'access callback' => 'ts_ck_entity_embed_permission',
    'type' => MENU_CALLBACK,
  );

  /**
   * Provides the HTML of a rendered entity.
   *
   * Parameters:
   *   - Entity type
   *   - Entity ID
   *   - View mode
   *   - Alignment
   */
  $items['admin/ts_ck_entity_embed/render/%/%/%/%'] = array(
    'page callback' => 'ts_ck_entity_embed_entity_render',
    'page arguments' => array(3, 4, 5, 6),
    'access callback' => 'ts_ck_entity_embed_permission',
    'type' => MENU_CALLBACK,
  );

  /**
   * Provides the HTML of a rendered entity preview.
   *
   * Parameters:
   *   - Entity type
   *   - Entity ID
   *   - View mode
   *   - Alignment
   */
  $items['admin/ts_ck_entity_embed/preview/render/%/%/%/%'] = array(
    'page callback' => 'ts_ck_entity_embed_entity_preview_render',
    'page arguments' => array(4, 5, 6, 7),
    'access callback' => 'ts_ck_entity_embed_permission',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_hook_info()
 */
function ts_ck_entity_embed_hook_info() {
  $hooks = array(
    'ts_ck_entity_embed_entity_info' => array(
      'group' => 'ts_ck_entity_embed',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_permission()
 */
function ts_ck_entity_embed_permission() {
  return array(
    'access ckeditor entity embed' => array(
      'title' => t('Access CKEditor Entity Embed plugin'),
    ),
  );
}

/**
 * Implements hook_ckeditor_settings_alter()
 */
function ts_ck_entity_embed_ckeditor_settings_alter(&$settings, $conf) {
  // Prevent CKEditor stripping IDs and classes from elements.
  $settings['extraAllowedContent'] = '*[id](*)';

  // Prevent CKEditor stripping images from the Picture module.
  $settings['extraAllowedContent'] .= ';object;picture;source;*[media]';

  $settings['fillEmptyBlocks'] = FALSE;

  // Add custom CSS files.
  $css_paths = ts_ck_entity_embed_get_editor_css();
  //$settings['contentsCss'] = '/' . $css_paths[0];

  foreach ($css_paths as $css_path) {
    $settings['contentsCss'][] = '/' . $css_path;
  }

  $settings['bodyId'] = 'content';
}

/**
 * Implements hook_ckeditor_plugin()
 */
function ts_ck_entity_embed_ckeditor_plugin() {
  $plugins = array();

  $plugins['entity'] = array(
    'name' => 'entity',
    'desc' => t('Plugin for embedding entities.'),
    'path' => drupal_get_path('module', 'ts_ck_entity_embed') . '/plugins/entity/',
    'buttons' => array(
      'Entity' => array(
        'icon' => 'icons/entity.png',
        'label' => 'Entity',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_form_alter()
 */
function ts_ck_entity_embed_form_alter(&$form, &$form_state, $form_id) {

  $entity_info = ts_ck_entity_embed_get_entity_info();

  foreach ($entity_info as $entity_type => $info) {
    if (isset($info['view_name'])) {
      if ($form['#id'] == 'views-exposed-form-' . str_replace('_', '-', $info['view_name']) . '-default') {
        $form['#action'] = '/' . $_GET['q'];
        continue;
      }
    }
  }

  // TODO: Limit to forms with CKEditor enabled.

  // Attach embeddable entity info to form.
  $entity_info = ts_ck_entity_embed_get_entity_info();

  $attached_js = array(
    array(
      'data' => array(
        'ts_ck_entity_embed' => array(
          'base_path' => drupal_get_path('module', 'ts_ck_entity_embed'),
          'entity_info' => $entity_info
        ),
      ),
      'type' => 'setting',
    ),
  );

  if (!isset($form['#attached'])) {
    $form['#attached'] = array();
  }

  if (!isset($form['#attached']['js'])) {
    $form['#attached']['js'] = array();
  }

  $form['#attached']['js'] += $attached_js;

  if (!isset($form['#attached']['css'])) {
    $form['#attached']['css'] = array();
  }

  $form['#attached']['css'][] = drupal_get_path('module', 'ts_ck_entity_embed') . '/includes/ts_ck_entity_embed.css';
}

/**
 * Implements hook_filter_info()
 */
function ts_ck_entity_embed_filter_info() {
  $filters['ckeditor_entity_embed'] = array(
    'title' => t('CKEditor Entity Embed'),
    'description' => t('Renders entities embedded into a text field.'),
    'process callback' => 'ts_ck_entity_embed_filter_process',
  );

  return $filters;
}

/**
 * Implements hook_views_pre_render()
 */
function ts_ck_entity_embed_views_pre_render(&$view) {
  $entity_info = ts_ck_entity_embed_get_entity_info();

  $valid_view = FALSE;
  foreach ($entity_info as $entity_type => $info) {
    if (isset($info['view_name']) && ($info['view_name'] == $view->name)) {
      $valid_view = TRUE;
      continue;
    }
  }

  if ($valid_view) {
    $result_index = 0;
    foreach ($view->style_plugin->row_plugin->rendered_content as $name => $content) {
      $entity = $view->style_plugin->view->result[$result_index];

      $container_id = $view->base_table . '-' . $entity->{$view->base_field};

      $view->style_plugin->row_plugin->rendered_content[$name]['#prefix'] = '<div id="' . $container_id . '" class="ts-ck-entity-embed-browser-entity">';
      $view->style_plugin->row_plugin->rendered_content[$name]['#suffix'] = '</div>';

      $result_index++;
    }
  }
}

/**
 * Filter process callback for CKEditor Entity Embed plugin.
 *
 * @param string $text
 *   The text string to be filtered.
 * @param object $filter
 *   The filter object containing settings for the given format.
 * @param string $format
 *   The text format object assigned to the text to be filtered.
 * @param string $langcode
 *   The language code of the text to be filtered.
 * @param bool $cache
 *   A Boolean indicating whether the filtered text is going to be cached in
 *   {cache_filter}.
 * @param int $cache_id
 *   The ID of the filtered text in {cache_filter}, if $cache is TRUE.
 *
 * @return string
 *   The filtered text.
 */
function ts_ck_entity_embed_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (!empty($text)) {
    $pattern = '/\[ts_ck_entity_embed\|entity_type=(\w+)\|entity_id=(\d+)\|view_mode=(\w+)\|alignment=(\w+)\]/s';
    $text = preg_replace_callback($pattern, 'ts_ck_entity_embed_process_callback', $text);
  }

  return $text;
}

/**
 * Callback for preg_replace in ts_ck_entity_embed_filter_process().
 */
function ts_ck_entity_embed_process_callback($matches = array()) {
  $content = '';

  $entity_type = (isset($matches[1])) ? $matches[1] : NULL;
  $entity_id = (isset($matches[2])) ? $matches[2] : NULL;
  $view_mode = (isset($matches[3])) ? $matches[3] : NULL;
  $alignment = (isset($matches[4])) ? $matches[4] : NULL;

  $entity_info = ts_ck_entity_embed_get_entity_info();

  if (isset($entity_info[$entity_type])) {
    $render_method = $entity_info[$entity_type]['render_method'];
    if (function_exists($render_method)) {

      $entity = entity_load_single($entity_type, $entity_id);

      if ($entity !== FALSE) {
        $content = $render_method($entity, $view_mode);
        $content = ts_ck_entity_embed_wrap_content_alignment($content, $alignment);
      }
    }
  }

  return $content;
}

/**
 * Gets embeddable entity information.
 *
 * @see hook_ts_ck_entity_embed_entity_info()
 */
function ts_ck_entity_embed_get_entity_info() {
  $entity_info = &drupal_static(__FUNCTION__);

  if (!isset($entity_info)) {
    $entity_info = ts_ck_entity_embed_default_entity_info();

    foreach (module_implements('ts_ck_entity_embed_entity_info') as $module) {
      foreach (module_invoke($module, 'ts_ck_entity_embed_entity_info') as $entity_type => $info) {
        $entity_info[$entity_type] = $info;
        if (!isset($entity_info[$entity_type]['view_modes']) || empty($entity_info[$entity_type]['view_modes'])) {
          $entity_info[$entity_type]['view_modes'] = ts_ck_entity_embed_get_view_modes($entity_type);
        }
      }
    }
  }

  drupal_alter('ts_ck_entity_embed_entity_info', $entity_info);

  return $entity_info;
}

/**
 * Gets default embeddable entity information.
 *
 * @see hook_ts_ck_entity_embed_entity_info()
 */
function ts_ck_entity_embed_default_entity_info() {
  $entity_info = array(
    'bean' => array(
      'tab_label' => 'Bean',
      'render_method' => 'ts_ck_entity_embed_render_bean',
      'view_name' => 'ts_ck_entity_embed_bean',
      'view_modes' => ts_ck_entity_embed_get_view_modes('bean'),
    ),
  );

  return $entity_info;
}

/**
 * Returns an array of CSS file paths to include in the editor.
 *
 * @see hook_ts_ck_entity_embed_editor_css()
 */
function ts_ck_entity_embed_get_editor_css() {
  $files = array(
    drupal_get_path('module', 'ts_ck_entity_embed') . '/includes/ts_ck_entity_embed.css',
  );

  foreach (module_implements('ts_ck_entity_embed_editor_css') as $module) {
    foreach (module_invoke($module, 'ts_ck_entity_embed_editor_css') as $path) {
      $files[] = $path;
    }
  }

  return $files;
}

function ts_ck_entity_embed_get_view_modes($entity_type) {
  $entity_info = entity_get_info($entity_type);
  $view_modes = ($entity_info) ? array_keys($entity_info['view modes']) : array();

  return $view_modes;
}

/**
 * Render method for embedded bean entities.
 */
function ts_ck_entity_embed_render_bean($entity, $view_mode) {
  $entity_view = bean_view($entity, $view_mode);
  return render($entity_view);
}

/**
 * Page callback for entity search URL.
 */
function ts_ck_entity_embed_entity_search($entity_type, $string) {
  $entities = array();

  $entity_info = ts_ck_entity_embed_get_entity_info();

  if (isset($entity_info[$entity_type])) {
    $search_field = $entity_info[$entity_type]['search_field'];

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $entity_type)
      ->propertyCondition($search_field, $string, 'CONTAINS')
      ->range(0, 20);

    $result = $query->execute();
    if (isset($result[$entity_type])) {
      $entity_ids = array_keys($result[$entity_type]);
      $entities_data = entity_load($entity_type, $entity_ids);

      if (!empty($entities_data)) {
        foreach ($entities_data as $id => $entity) {
          $entities[] = array(
            'id' => $id,
            'label' => $entity->$search_field,
          );
        }
      }
    }
  }

  drupal_json_output($entities);
}

/**
 * Page callback for view render URL.
 */
function ts_ck_entity_embed_view_render($view_name, $display_id = 'default') {
  $content = '';

  $view = views_get_view($view_name);
  if ($view && $view->access($display_id)) {
    $css_path = '/' . drupal_get_path('module', 'ts_ck_entity_embed') . '/includes/ts_ck_entity_embed_browser.css';

    $content = views_embed_view($view_name, $display_id);
    $content .= '<style type="text/css" media="screen">@import url("' . $css_path . '");</style>';
  }

  echo $content;
}

/**
 * Page callback for entity render URL.
 */
function ts_ck_entity_embed_entity_render($entity_type, $entity_id, $view_mode, $alignment, $return_content = FALSE) {
  $content = '';

  $entity_info = ts_ck_entity_embed_get_entity_info();

  if (isset($entity_info[$entity_type])) {
    $render_method = $entity_info[$entity_type]['render_method'];
    if (function_exists($render_method)) {

      $entity = entity_load_single($entity_type, $entity_id);

      if ($entity !== FALSE) {
        $content = $render_method($entity, $view_mode);
        $content = ts_ck_entity_embed_wrap_content_alignment($content, $alignment);
      }
    }
  }

  $content = preg_replace('/<a(.*?)href="(.*?)"(.*?)>/', '', $content);
  $content = preg_replace('/<\/a>/', '', $content);

  if ($return_content) {
    return $content;
  }
  else {
    echo $content;
  }
}

/**
 * Page callback for entity preview render URL.
 */
function ts_ck_entity_embed_entity_preview_render($entity_type, $entity_id, $view_mode, $alignment) {
  $content = '<div id="content">';
  $content .= '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi semper malesuada semper. Mauris aliquam dui ante, in bibendum leo consequat et. Vestibulum tortor dui, consectetur et odio et, fringilla tempor odio. Nam blandit vestibulum metus eget consectetur. Nam consequat dignissim nunc nec sagittis. Aenean a eleifend felis. Praesent vel est sed lectus pulvinar ultricies. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque non facilisis dolor.</p>';

  $content .= ts_ck_entity_embed_entity_render($entity_type, $entity_id, $view_mode, $alignment, TRUE);

  $content .= '<p>Praesent consectetur tortor eget libero rhoncus posuere. Duis finibus ligula sit amet viverra feugiat. Duis at risus feugiat, ullamcorper leo in, tincidunt sapien. Integer vulputate posuere turpis in blandit. Sed accumsan viverra nibh, at laoreet libero feugiat a. Mauris est est, luctus sed nulla eu, porta malesuada augue. Nunc iaculis quam non mollis pellentesque. Sed hendrerit accumsan sapien. Pellentesque ultricies congue justo, at euismod quam placerat sed. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Quisque dolor massa, luctus sagittis est at, dictum aliquam augue. Morbi porta in est feugiat semper. Pellentesque at malesuada quam.</p>';
  $content .= '<p>Quisque fringilla sit amet ante eget tristique. Maecenas maximus ullamcorper augue, et sagittis metus ullamcorper eu. Etiam sit amet aliquet metus. Fusce posuere ligula vitae euismod ultrices. Proin et tortor vel dolor aliquam scelerisque et vitae lectus. Suspendisse potenti. Curabitur libero velit, volutpat eget nunc sed, mattis dictum erat. Cras ut aliquam urna, non commodo ante. Nam vulputate, dolor eu sodales sodales, neque justo auctor metus, et elementum arcu ex ornare libero. Proin vel tortor ac turpis dapibus tristique suscipit et felis. Quisque eget nisl arcu. Donec ex arcu, dapibus sed lobortis eu, posuere non dolor.</p>';
  $content .= '</div>';

  $css_paths = ts_ck_entity_embed_get_editor_css();

  foreach ($css_paths as $path) {
    $content .= '<style type="text/css" media="screen">@import url("/' . $path . '");</style>';
  }

  echo $content;
}

function ts_ck_entity_embed_wrap_content_alignment($content, $alignment) {
  switch ($alignment) {
    case 'left':
      $content = '<div class="ts-ck-entity-embed-left">' . $content . '</div>';
      break;
    case 'right':
      $content = '<div class="ts-ck-entity-embed-right">' . $content . '</div>';
      break;
    case 'center':
      $content = '<div class="ts-ck-entity-embed-center">' . $content . '</div>';
      break;
  }

  return $content;
}
