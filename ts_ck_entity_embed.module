<?php

/**
 * @file
 * Defines core TS CK Entity Embed functionality.
 */

/**
 * Implements hook_menu().
 */
function ts_ck_entity_embed_menu() {
  $items = array();

  $items['admin/ts_ck_entity_embed/entities/%/%'] = array(
    'page callback' => 'ts_ck_entity_embed_entity_search',
    'page arguments' => array(3, 4),
    'access callback' => 'ts_ck_entity_embed_permission',
    'type' => MENU_CALLBACK,
  );

  $items['admin/ts_ck_entity_embed/render/%/%/%'] = array(
    'page callback' => 'ts_ck_entity_embed_entity_render',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'ts_ck_entity_embed_permission',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_hook_info().
 */
function ts_ck_entity_embed_hook_info() {
  $hooks = array(
    'ts_ck_entity_embed_entity_info' => array(
      'group' => 'ts_ck_entity_embed',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_permission().
 */
function ts_ck_entity_embed_permission() {
  return array(
    'access ckeditor entity embed' => array(
      'title' => t('Access CKEditor Entity Embed plugin'),
    ),
  );
}

/**
 * Implements hook_ckeditor_plugin().
 */
function ts_ck_entity_embed_ckeditor_plugin() {
  $plugins = array();

  $plugins['entity'] = array(
    'name' => 'entity',
    'desc' => t('Plugin for embedding entities.'),
    'path' => drupal_get_path('module', 'ts_ck_entity_embed') . '/plugins/entity/',
    'buttons' => array(
      'Entity' => array(
        'icon' => 'icons/entity.png',
        'label' => 'Entity',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ts_ck_entity_embed_form_alter(&$form, &$form_state, $form_id) {
  // TODO: Limit to forms with CKEditor enabled.

  // Attach embeddable entity info to form.
  $entity_info = ts_ck_entity_embed_get_entity_info();

  $attached_js = array(
    array(
      'data' => array(
        'ts_ck_entity_embed' => array('entity_info' => $entity_info),
      ),
      'type' => 'setting',
    ),
  );

  if (!isset($form['#attached'])) {
    $form['#attached'] = array();
  }

  if (!isset($form['#attached']['js'])) {
    $form['#attached']['js'] = array();
  }

  $form['#attached']['js'] += $attached_js;

  if (!isset($form['#attached']['css'])) {
    $form['#attached']['css'] = array();
  }

  $form['#attached']['css'][] = drupal_get_path('module', 'ts_ck_entity_embed') . '/includes/ts_ck_entity_embed.css';
}

/**
 * Implements hook_filter_info().
 */
function ts_ck_entity_embed_filter_info() {
  $filters['ckeditor_entity_embed'] = array(
    'title' => t('CKEditor Entity Embed'),
    'description' => t('Renders entities embedded into a text field.'),
    'process callback' => 'ts_ck_entity_embed_filter_process',
  );

  return $filters;
}

/**
 * Filter process callback for CKEditor Entity Embed plugin.
 *
 * @param string $text
 *   The text string to be filtered.
 * @param object $filter
 *   The filter object containing settings for the given format.
 * @param string $format
 *   The text format object assigned to the text to be filtered.
 * @param string $langcode
 *   The language code of the text to be filtered.
 * @param bool $cache
 *   A Boolean indicating whether the filtered text is going to be cached in
 *   {cache_filter}.
 * @param int $cache_id
 *   The ID of the filtered text in {cache_filter}, if $cache is TRUE.
 *
 * @return string
 *   The filtered text.
 */
function ts_ck_entity_embed_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (!empty($text)) {
    $pattern = '/\[ts_ck_entity_embed\|entity_type=(\w+)\|entity_id=(\d+)\|view_mode=(\w+)\]/s';
    $text = preg_replace_callback($pattern, 'ts_ck_entity_embed_process_callback', $text);
  }

  return $text;
}

/**
 * Callback for preg_replace in ts_ck_entity_embed_filter_process().
 */
function ts_ck_entity_embed_process_callback($matches = array()) {
  $content = '';

  $entity_type = (isset($matches[1])) ? $matches[1] : NULL;
  $entity_id = (isset($matches[2])) ? $matches[2] : NULL;
  $view_mode = (isset($matches[3])) ? $matches[3] : NULL;

  $entity_info = ts_ck_entity_embed_get_entity_info();

  if (isset($entity_info[$entity_type])) {
    $render_method = $entity_info[$entity_type]['render_method'];
    if (function_exists($render_method)) {

      $entity = entity_load_single($entity_type, $entity_id);

      if ($entity !== FALSE) {
        $content = $render_method($entity, $view_mode);
      }
    }
  }

  return $content;
}

/**
 * Gets embeddable entity information.
 *
 * @see hook_ts_ck_entity_embed_entity_info()
 */
function ts_ck_entity_embed_get_entity_info() {
  $entity_info = &drupal_static(__FUNCTION__);

  if (!isset($entity_info)) {
    $entity_info = ts_ck_entity_embed_default_entity_info();

    foreach (module_implements('ts_ck_entity_embed_entity_info') as $module) {
      foreach (module_invoke($module, 'ts_ck_entity_embed_entity_info') as $entity_type => $info) {
        $entity_info[$entity_type] = $info;
        $entity_info[$entity_type] = ts_ck_entity_embed_get_view_modes($entity_type);
      }
    }
  }

  return $entity_info;
}

/**
 * Gets default embeddable entity information.
 *
 * @see hook_ts_ck_entity_embed_entity_info()
 */
function ts_ck_entity_embed_default_entity_info() {
  $entity_info = array(
    'bean' => array(
      'render_method' => 'ts_ck_entity_embed_render_bean',
      'view_modes' => ts_ck_entity_embed_get_view_modes('bean'),
    ),
  );

  return $entity_info;
}

function ts_ck_entity_embed_get_view_modes($entity_type) {
  $entity_info = entity_get_info($entity_type);
  $view_modes = ($entity_info) ? array_keys($entity_info['view modes']) : array();

  return $view_modes;
}

/**
 * Render method for embedded bean entities.
 */
function ts_ck_entity_embed_render_bean($entity, $view_mode) {
  $entity_view = bean_view($entity, $view_mode);
  return render($entity_view);
}

/**
 * Page callback for entity search URL.
 */
function ts_ck_entity_embed_entity_search($entity_type, $string) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)
    ->propertyCondition('label', $string, 'CONTAINS')
    ->range(0, 20);

  $entities = array();

  $result = $query->execute();
  if (isset($result[$entity_type])) {
    $entity_ids = array_keys($result[$entity_type]);
    $entities_data = entity_load($entity_type, $entity_ids);

    if (!empty($entities_data)) {
      foreach ($entities_data as $id => $entity) {
        $entities[] = array(
          'id' => $id,
          'label' => $entity->label,
          'view_modes' => array(),
        );
      }
    }
  }

  drupal_json_output($entities);
}

/**
 * Page callback for entity render URL.
 */
function ts_ck_entity_embed_entity_render($entity_type, $entity_id, $view_mode) {
  $content = '';

  $entity_info = ts_ck_entity_embed_get_entity_info();

  if (isset($entity_info[$entity_type])) {
    $render_method = $entity_info[$entity_type]['render_method'];
    if (function_exists($render_method)) {

      $entity = entity_load_single($entity_type, $entity_id);

      if ($entity !== FALSE) {
        $content = $render_method($entity, $view_mode);
      }
    }
  }

  echo $content;
}
